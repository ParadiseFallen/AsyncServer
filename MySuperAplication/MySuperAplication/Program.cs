using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
namespace MySuperAplication
{
    class Program
    {
        //Реализовать программу “Строительство дома”
        //Реализовать:
        //Классы
        //House(Дом), Basement(Фундамент), Walls(Стены),Door(Дверь), Window(Окно), Roof(Крыша);
        //Worker(Строитель),TeamLeader(Бригадир).
        //Интерфейсы
        //IWorker, IPart.
        //Все части дома должны реализовать интерфейс IPart(Часть дома), для рабочих и бригадира предоставляется базовый интерфейс IWorker(Рабочий).
        //Бригада строителей  строит дом(House). 
        //Дом состоит из фундамента(Basement), стен(Wall), окон(Window), дверей(Door), крыши(Part).
        //Согласно проекту, в доме должно быть:
        //1 фундамент,4 стены, 1 дверь, 4 окна и 1 крыша.
        //Бригада начинает работу, и строители последовательно “строят” дом, начиная с фундамента.
        //Каждый строитель не знает заранее, на чём завершился предыдущий этап строительства, 
        //поэтому он “проверяет”, что уже построено и продолжает работу.
        //Если в игру вступает бригадир (TeamLeader), он не строит, а формирует отчёт, что уже построено и какая часть работы выполнена.
        //В конечном итоге на консоль выводится сообщение, 
        //что строительство дома завершено и отображается “рисунок дома” (вариант отображения выбрать самостоятельно).
        //IWorker:
        //метод строить
        //свойство имя
        //IPart:
        //свойство состояние
        //название постройки
        //по желанию - отрисовать постройку

        //Описать класс ДОМ
        //в котором будут присутствовать все типы построек(фундамент, массив стен, массив окон, крыша)
        //метод проверки всего дома на готовность

        //в main
        //создать список строителей(3 шт)+бригадир.
        //создать список построек

        //создать объект Дом.
        static void Main()
        {

        }
    }
}
